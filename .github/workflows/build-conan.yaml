name: Build

on:
  push:
  pull_request:

jobs:
  build-cmake:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
        - os: windows-2019
          build-type: Release
        - os: ubuntu-20.04
          build-type: Release

    steps:
    - uses: actions/checkout@v3

    - name: Prepare the system (Linux)
      if: contains(matrix.os, 'ubuntu')
      run: |
        sudo scripts/prepare-system-conan.sh

    - name: Install Conan
      id: conan
      uses: turtlebrowser/get-conan@main

    - name: Configure
      shell: cmake -P {0}
      run: |
        cmake_minimum_required(VERSION 3.14)
        if("${{ matrix.build-type }}" STREQUAL "Release" AND NOT "${{ matrix.tests }}" STREQUAL "true")
          set(cmake_release_args "-DDEV_BUILD=OFF")
        endif()
        if("${CMAKE_HOST_SYSTEM_NAME}" MATCHES "Windows")
          set(cmake_generator "Visual Studio 16 2019")
          set(cmake_generator_platform_arg "-A x64")
        else()
          set(cmake_generator "Ninja")
        endif()

        execute_process(COMMAND ${CMAKE_COMMAND}
          -B build
          -G "${cmake_generator}" ${cmake_generator_platform_arg}
          -DCMAKE_BUILD_TYPE=${{ matrix.build-type }}
          ${cmake_release_args}
          -DUSE_CONAN=ON
          RESULT_VARIABLE CONF_RESULT
        )

        if(CONF_RESULT)
            message(FATAL_ERROR "Configuration failed")
        endif()

    - name: Build
      run: cmake --build ${{github.workspace}}/build --config ${{ matrix.build-type }}

    - name: Test
      if: matrix.tests
      working-directory: ${{github.workspace}}/build
      run: ctest -C ${{ matrix.build-type }} --output-on-failure

    - name: Package
      working-directory: ${{github.workspace}}/build
      run: cpack -C ${{ matrix.build-type }}

    - name: Upload Artifacts
      uses: actions/upload-artifact@v3
      with:
        path: ${{github.workspace}}/build/machines-*.zip
