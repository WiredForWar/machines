/*
 * N U M E R I C . C T F
 * (c) Charybdis Limited, 1995. All Rights Reserved.
 */

//////////////////////////////////////////////////////////////////////

template < class INPUT_ITER, class T >
T 
accumulate( INPUT_ITER first, INPUT_ITER last, T init )
{
    while( first != last ) 
		init = init + *first++;

	return init;
}

template < class INPUT_ITER, class T, class BINARY_OP >
T 
accumulate(	INPUT_ITER first,
				INPUT_ITER last,
				T init,
	     		BINARY_OP binary_op )
{
    while( first != last ) 
		init = binary_op( init, *first++ );

    return init;
}

///////////////////////////////////

template < 	class INPUT_ITER1,
			class INPUT_ITER2,
			class T >
T
inner_product(	INPUT_ITER1 first1,
				INPUT_ITER1 last1,
				INPUT_ITER2 first2,
				T init )
{
	while( first1 != last1 ) 
		init = init + ( *first1++ * *first2++ );

    return init;
}

template < class INPUT_ITER1,
			class INPUT_ITER2, 
			class T,
	  		class BINARY_OP1, 
	  		class BINARY_OP2 >
T
inner_product(	INPUT_ITER1 first1,
				INPUT_ITER1 last1,
				INPUT_ITER2 first2,
				T init,
				BINARY_OP1 binary_op1,
				BINARY_OP2 binary_op2 )
{
	while( first1 != last1 ) 
		init = binary_op1( init, binary_op2( *first1++, *first2++ ) );

    return init;
}

///////////////////////////////////

template <	class INPUT_ITER, 
			class OUTPUT_ITER, 
			class T >
OUTPUT_ITER 
__partial_sum(	INPUT_ITER first,
				INPUT_ITER last,
				OUTPUT_ITER result, 
				T * )
{
    T value = *first;
    while( ++first != last )
    {
		value = value + *first;
		*++result = value;
    }

    return ++result;
}

template <	class INPUT_ITER, 
			class OUTPUT_ITER >
OUTPUT_ITER 
partial_sum(	INPUT_ITER first,
				INPUT_ITER last,
			   	OUTPUT_ITER result )
{
    if( first == last )
    	return result;

    *result = *first;
    return __partial_sum( first, last, result, value_type( first ) );
}

///////////////////////////////////

template <	class INPUT_ITER, 
			class OUTPUT_ITER, 
			class T,
	  		class BINARY_OP >
OUTPUT_ITER
__partial_sum(	INPUT_ITER first,
				INPUT_ITER last,
				OUTPUT_ITER result,
				T*,
				BINARY_OP binary_op )
{
    T value = *first;
    while( ++first != last )
    {
		value = binary_op( value, *first );
		*++result = value;
    }

    return ++result;
}

template <	class INPUT_ITER,
			class OUTPUT_ITER,
			class BINARY_OP >
OUTPUT_ITER
partial_sum(	INPUT_ITER first,
				INPUT_ITER last,
				OUTPUT_ITER result,
				BINARY_OP binary_op )
{
	if( first == last )
		return result;

    *result = *first;
    return __partial_sum( first, last, result, 
    						value_type( first ), binary_op );
}

///////////////////////////////////

template <	class INPUT_ITER,
			class OUTPUT_ITER,
			class T >
OUTPUT_ITER
__adjacent_difference(	INPUT_ITER first,
						INPUT_ITER last, 
				     	OUTPUT_ITER result,
				     	T * )
{
    T value = *first;
    while( ++first != last )
    {
		T tmp = *first;
		*++result = tmp - value;
		value = tmp;
    }

    return ++result;
}

template <	class INPUT_ITER, 
			class OUTPUT_ITER >
OUTPUT_ITER
adjacent_difference(INPUT_ITER first, INPUT_ITER last, 
				   OUTPUT_ITER result) {
    if( first == last )
    	return result;

    *result = *first;
    return __adjacent_difference( first, last, 
    			result, value_type( first ) );
}

///////////////////////////////////

template <	class INPUT_ITER, 
			class OUTPUT_ITER, 
			class T, 
	  		class BINARY_OP >
OUTPUT_ITER
__adjacent_difference(	INPUT_ITER first, 
						INPUT_ITER last, 
				     	OUTPUT_ITER result, 
				     	T*,
				     	BINARY_OP binary_op )
{
    T value = *first;
    while( ++first != last )
    {
		T tmp = *first;
		*++result = binary_op( tmp, value );
		value = tmp;
    }

    return ++result;
}

template <	class INPUT_ITER, 
			class OUTPUT_ITER, 
			class BINARY_OP >
OUTPUT_ITER 
adjacent_difference(	INPUT_ITER first, 
						INPUT_ITER last,
				   		OUTPUT_ITER result,
				   		BINARY_OP binary_op )
{
    if( first == last )
    	return result;

    *result = *first;
    return __adjacent_difference( first, last,
    								result, value_type( first ),
									binary_op );
}

///////////////////////////////////

template < class FORWARD_ITER, class T >
void 
iota( 	FORWARD_ITER first, 
		FORWARD_ITER last, 
		T value )
{
	while( first != last )
		*first++ = value++;
}

//////////////////////////////////////////////////////////////////////

/* End NUMERIC.CTF **************************************************/
