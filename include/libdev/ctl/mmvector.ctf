/*
 * M M V E C T O R . C T F
 * (c) Charybdis Limited, 1996. All Rights Reserved.
 */

template < class T >
bool operator ==( const ctl_min_memory_vector< T >& x,
					const ctl_min_memory_vector< T > & y )
{
	return x.size() == y.size()
			and equal( x.begin(), x.end(), y.begin() );
}

template < class T >
bool operator <( const ctl_min_memory_vector< T >& x, const ctl_min_memory_vector< T >& y )
{
	return lexicographical_compare( x.begin(), x.end(),
										y.begin(), y.end() );
}

template< class T >
void perWrite( PerOstream& ostr, const ctl_min_memory_vector< T >& vec )
{
    if( vec.persistAsRaw() )
    {
        size_t nEntries = vec.size();
        PER_WRITE_RAW_OBJECT( ostr, nEntries );

        PER_WRITE_RAW_DATA( ostr, &vec[ 0 ], nEntries * sizeof( T ) );
    }
    else
    {
        PER_WRITE_RAW_OBJECT( ostr, vec.size() );

        for( typename ctl_min_memory_vector< T >::const_iterator i = vec.begin(); i != vec.end(); ++i )
        {
            ostr << *i;
        }
    }
}

template< class T >
void perRead( PerIstream& istr, ctl_min_memory_vector< T >& vec )
{
    vec.erase( vec.begin(), vec.end() );
    ASSERT( vec.size() == 0, "Vector has not been properly cleared" );

    if( vec.persistAsRaw() )
    {
        size_t nEntries;
        PER_READ_RAW_OBJECT( istr, nEntries );

        ctl_min_memory_vector< T >   dummyVec( nEntries );
        vec = dummyVec;

        PER_READ_RAW_DATA( istr, &vec[ 0 ], nEntries * sizeof( T ) );
    }
    else
    {
        size_t  size;
        PER_READ_RAW_OBJECT( istr, size );

        vec.reserve( size );

        for( size_t i = 0; i < size; ++i )
        {
            T   t;
            istr >> t;
            vec.push_back( t );
        }
    }
}

template< class T >
ostream& operator <<( ostream& ostr, const ctl_min_memory_vector< T >& vec )
{
    for( typename ctl_min_memory_vector< T >::const_iterator i = vec.begin(); i != vec.end(); ++i )
    {
        ostr << *i << std::endl;
    }

    return ostr;
}

