/*
 * C S 2 F I N D P . H P P
 * (c) Charybdis Limited, 1997. All Rights Reserved
 */

/*
    PhysCS2dFindPath

    Implements the path finding algorithm in a PhysConfigSpace2d class.
    This is an implementation class for PhysConfigSpace2d.
*/

#ifndef _PHYS_CS2FINDP_HPP
#define _PHYS_CS2FINDP_HPP

#include "base/base.hpp"
#include "ctl/nbvector.hpp"
#include "mathex/mathex.hpp"
#include "mathex/point2d.hpp"
#include "graph/astarvtx.hpp"
#include "graph/astaralg.hpp"

#include "phys/cspace2.hpp"
#include "phys/internal/cs2dmgra.hpp"
#include "phys/internal/cs2dmvtx.hpp"

//Forward declarations

//Orthodox canonical (revoked)
class PhysCS2dFindPath
{
public:
    //Default ctor for collections etc.
    PhysCS2dFindPath( void );

    typedef PhysConfigSpace2d::ObstacleFlags ObstacleFlags;

    //ctor. Finds a path contained in pSpace from startPoint to endPoint, when
    //the line segments are expanded by clearance.
    //flags indicates those obstacles which can be ignored
    PhysCS2dFindPath( PhysConfigSpace2d* pSpace, const MexPoint2d& startPoint,
                      const MexPoint2d& endPoint, MATHEX_SCALAR clearance,
                      ObstacleFlags flags,
                      PhysPathFindingPriority priority );

    //dtor
    ~PhysCS2dFindPath( void );

    //Useful types
    typedef PhysConfigSpace2d::PolygonIds PolygonIds;
    typedef PhysConfigSpace2d::Path Path;

    //Ignore the polygons with ids listed in polygons for pathfinding.
    //This is not cumulative (ie in successive calls only the latest is used).
    //The client must ensure that the polygons collection persists as long as
    //the pathFind exists.
    void ignorePolygons( const PolygonIds& polygons );

    //True if the algorithm is finished
    bool isFinished( void ) const;

    //Run the algorithm (for no longer than maxTime)
    void update( const PhysRelativeTime& maxTime );
    //PRE( state_ != UNDEFINED )

    //True if a path was found. In this case, the points are returned in pPath
    bool output( Path* pPath ) const;
    //PRE( state_ == FINISHED )

    PhysPathFindingPriority priority() const;
    void increasePriority();

    void CLASS_INVARIANT;

    friend ostream& operator <<( ostream& o, const PhysCS2dFindPath& t );

private:
    // Operations deliberately revoked
    PhysCS2dFindPath( const PhysCS2dFindPath& );
    PhysCS2dFindPath& operator =( const PhysCS2dFindPath& );
    bool operator ==( const PhysCS2dFindPath& );

    //Private types etc
    enum State
    {
        UNDEFINED, //No search data
        NOT_STARTED, //Haven't got going yet
        PENDING_PATHFIND, //Waiting to do a pathFind
        PATHFIND, //Doing a pathFind
        FINISHED
    };

    //Updates at various stages
    void start( void );

    //tell the config space to ignore/not ignore the registered ignore polygons
    void ignorePolygons( bool doIgnore );

    //////////////////////////////////////////////////

    //Tries to initiate a search using the expansion space's visibility
    //graph. If successful enters PATHFIND state. Otherwise remains in pending state.
    void startPathSearch( void );
    //PRE( state_ == PENDING_PATHFIND );

    //True if the current path is contained in the config space.
    //Otherwise adds each polygon the path intersects to the open expansion space,
    //returning the number added which were not previously contained in the
    //expansion space in nExtraPolygons.
    bool checkPath( size_t* nExtraPolygons );

    //True if the current path visibility graph search is complete
    bool isPathSearchFinished( void ) const;
    //PRE( state_ == PATHFIND );

    //Advance the path search algorithm (for no longer than maxTime)
    void updatePathSearch( const PhysRelativeTime& maxTime );
    //PRE( state_ == PATHFIND )

    enum Abort { FORCE_ABORT, DO_NOT_FORCE_ABORT };

    //A path search has been completed. Checks results, restarts if necessary, or
    //adds result to the full path.
    void endPathSearch( Abort );
    //PRE( state_ == PATHFIND )
    //PRE( isPathSearchFinished() );

    //////////////////////////////////////////////////

    //True if permanent polygons in the ConfigSpace intersect the polygon
    //generated by sweeping p1 to p2 with a clearance clearance.
    //Any intersecting polygon ids are pushed onto pPolygonIds.
    bool spaceIntersections( const MexPoint2d& p1, const MexPoint2d& p2,
                             MATHEX_SCALAR clearance, PolygonIds* pPolygonIds ) const;

    //Data members
    State state_; // Indicates where at
    MexPoint2d startPoint_;// Start position
    MexPoint2d endPoint_;// End position
    MATHEX_SCALAR clearance_;//The clearance needed all round the path
    MATHEX_SCALAR expansionDistance_; //Expansion distance used around obstacles during
                                      //subpath collision avoidance
    PhysConfigSpace2d* pConfigSpace_;//The config space through which we try to find the path
    Path fullPath_; // Full path for getting from start to end
    const PolygonIds* pIgnorePolygons_; //Pointer to polygons to be ignored. This does not own it.

    ObstacleFlags   flags_; //The obstacles that can be ignored for this find path
    PhysPathFindingPriority priority_;
};

#ifdef _INLINE
    #include "internal/cs2findp.ipp"
#endif


#endif

/* End CS2FINDP.HPP *************************************************/
